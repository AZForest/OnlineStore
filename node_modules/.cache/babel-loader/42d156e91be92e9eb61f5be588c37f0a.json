{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/User/Cart/Cart.js\";\nimport React from 'react';\nimport classes from './Cart.module.css';\nimport { connect } from 'react-redux';\nimport CartItem from '../../../components/UI/CartItem/CartItem';\nimport axios from 'axios';\nimport * as actionTypes from '../../../store/actions/actionTypes';\n\nclass Cart extends React.Component {\n  addHandler(name, price) {\n    let data = {\n      prevCart: this.props.user.cart,\n      product: {\n        name: name,\n        price: price\n      }\n    };\n    let updatedAcc = { ...this.props.user,\n      cart: this.props.user.cart.concat(data.product)\n    };\n    /* axios.patch(`http://localhost:3005/users/${this.props.user.id}`, { cart: `${this.props.user.cart.push(product)}`} ) */\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data).then(response => {\n      console.log(response);\n      this.props.onUpdateCart(updatedAcc);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  removeHandler(name, price) {\n    let data = {\n      prevCart: this.props.user.cart,\n      product: {\n        name: name,\n        price: price\n      }\n    };\n    let cartArray = this.props.user.cart;\n    let index2 = -1;\n\n    for (let i = 0; i < cartArray.length; i++) {\n      if (cartArray[i].name === data.product.name) {\n        index2 = i;\n      }\n    }\n\n    if (index2 >= 0) {\n      cartArray.splice(index2, 1);\n    }\n\n    console.log(cartArray);\n    let updatedAcc = { ...this.props.user,\n      cart: cartArray\n    }; //PATCH remove\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data).then(response => {\n      console.log(response);\n      this.props.onUpdateCart(updatedAcc);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Cart,\n      children: this.props.user.cart.map(item => {\n        return /*#__PURE__*/_jsxDEV(CartItem, {\n          name: item.name,\n          price: item.price,\n          add: () => this.addHandler(item.name, item.price)\n        }, Math.random(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.activeUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateCart: account => dispatch({\n      type: actionTypes.UPDATE_CART,\n      account\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","map":{"version":3,"sources":["/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/User/Cart/Cart.js"],"names":["React","classes","connect","CartItem","axios","actionTypes","Cart","Component","addHandler","name","price","data","prevCart","props","user","cart","product","updatedAcc","concat","patch","id","then","response","console","log","onUpdateCart","catch","err","removeHandler","cartArray","index2","i","length","splice","render","map","item","Math","random","mapStateToProps","state","activeUser","mapDispatchToProps","dispatch","account","type","UPDATE_CART"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,oCAA7B;;AAEA,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AAE/BC,EAAAA,UAAU,CAACC,IAAD,EAAOC,KAAP,EAAc;AACpB,QAAIC,IAAI,GAAG;AACPC,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IADnB;AAEPC,MAAAA,OAAO,EAAE;AACLP,QAAAA,IAAI,EAAEA,IADD;AAELC,QAAAA,KAAK,EAAEA;AAFF;AAFF,KAAX;AAOA,QAAIO,UAAU,GAAG,EACb,GAAG,KAAKJ,KAAL,CAAWC,IADD;AAEbC,MAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,CAAqBG,MAArB,CAA4BP,IAAI,CAACK,OAAjC;AAFO,KAAjB;AAKA;;AACAZ,IAAAA,KAAK,CAACe,KAAN,CAAa,+BAA8B,KAAKN,KAAL,CAAWC,IAAX,CAAgBM,EAAG,MAA9D,EAAqET,IAArE,EACCU,IADD,CACMC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAKT,KAAL,CAAWY,YAAX,CAAwBR,UAAxB;AACH,KAJD,EAKCS,KALD,CAKOC,GAAG,IAAI;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,KAPD;AAQH;;AAEDC,EAAAA,aAAa,CAACnB,IAAD,EAAOC,KAAP,EAAc;AACvB,QAAIC,IAAI,GAAG;AACPC,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IADnB;AAEPC,MAAAA,OAAO,EAAE;AACLP,QAAAA,IAAI,EAAEA,IADD;AAELC,QAAAA,KAAK,EAAEA;AAFF;AAFF,KAAX;AAOA,QAAImB,SAAS,GAAG,KAAKhB,KAAL,CAAWC,IAAX,CAAgBC,IAAhC;AAEA,QAAIe,MAAM,GAAG,CAAC,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIF,SAAS,CAACE,CAAD,CAAT,CAAatB,IAAb,KAAsBE,IAAI,CAACK,OAAL,CAAaP,IAAvC,EAA6C;AACzCqB,QAAAA,MAAM,GAAGC,CAAT;AACH;AACJ;;AACD,QAAID,MAAM,IAAI,CAAd,EAAiB;AACbD,MAAAA,SAAS,CAACI,MAAV,CAAiBH,MAAjB,EAAyB,CAAzB;AACH;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ;AAEA,QAAIZ,UAAU,GAAG,EACb,GAAG,KAAKJ,KAAL,CAAWC,IADD;AAEbC,MAAAA,IAAI,EAAEc;AAFO,KAAjB,CArBuB,CA0BvB;;AACAzB,IAAAA,KAAK,CAACe,KAAN,CAAa,+BAA8B,KAAKN,KAAL,CAAWC,IAAX,CAAgBM,EAAG,SAA9D,EAAwET,IAAxE,EACCU,IADD,CACMC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAKT,KAAL,CAAWY,YAAX,CAAwBR,UAAxB;AACH,KAJD,EAKCS,KALD,CAKOC,GAAG,IAAI;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,KAPD;AASH;;AAEDO,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAEjC,OAAO,CAACK,IAAxB;AAAA,gBACK,KAAKO,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,CAAqBoB,GAArB,CAAyBC,IAAI,IAAI;AAC9B,4BAAO,QAAC,QAAD;AAA8B,UAAA,IAAI,EAAEA,IAAI,CAAC3B,IAAzC;AAA+C,UAAA,KAAK,EAAE2B,IAAI,CAAC1B,KAA3D;AAAkE,UAAA,GAAG,EAAE,MAAM,KAAKF,UAAL,CAAgB4B,IAAI,CAAC3B,IAArB,EAA2B2B,IAAI,CAAC1B,KAAhC;AAA7E,WAAe2B,IAAI,CAACC,MAAL,EAAf;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAxE8B;;AA2EnC,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACH1B,IAAAA,IAAI,EAAE0B,KAAK,CAACC;AADT,GAAP;AAGH,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHlB,IAAAA,YAAY,EAAGmB,OAAD,IAAaD,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAExC,WAAW,CAACyC,WAAnB;AAAgCF,MAAAA;AAAhC,KAAD;AADhC,GAAP;AAGH,CAJD;;AAMA,eAAe1C,OAAO,CAACqC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpC,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport classes from './Cart.module.css';\nimport { connect } from 'react-redux';\nimport CartItem from '../../../components/UI/CartItem/CartItem';\nimport axios from 'axios';\nimport * as actionTypes from '../../../store/actions/actionTypes';\n\nclass Cart extends React.Component {\n\n    addHandler(name, price) {\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price\n            }\n        }\n        let updatedAcc = {\n            ...this.props.user,\n            cart: this.props.user.cart.concat(data.product)\n        }\n\n        /* axios.patch(`http://localhost:3005/users/${this.props.user.id}`, { cart: `${this.props.user.cart.push(product)}`} ) */\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    removeHandler(name, price) {\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price\n            }\n        }\n        let cartArray = this.props.user.cart;\n\n        let index2 = -1;\n        for (let i = 0; i < cartArray.length; i++) {\n            if (cartArray[i].name === data.product.name) {\n                index2 = i;\n            }\n        }\n        if (index2 >= 0) {\n            cartArray.splice(index2, 1);\n        }\n        console.log(cartArray);\n\n        let updatedAcc = {\n            ...this.props.user,\n            cart: cartArray\n        }\n       \n        //PATCH remove\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n        \n    }\n\n    render() {\n        return (\n            <div className={classes.Cart}>\n                {this.props.user.cart.map(item => {\n                    return <CartItem key={Math.random()} name={item.name} price={item.price} add={() => this.addHandler(item.name, item.price)}/>\n                })}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.activeUser\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateCart: (account) => dispatch({type: actionTypes.UPDATE_CART, account})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);"]},"metadata":{},"sourceType":"module"}