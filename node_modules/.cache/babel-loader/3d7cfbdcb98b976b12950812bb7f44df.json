{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/Products/Frozen/Frozen.js\";\nimport classes from '../Fruit/Fruit.module.css';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport ProductModel from '../../../components/UI/ProductModel/ProductModel';\nimport * as actionTypes from '../../../store/actions/actionTypes'; //Images\n\nimport berryMedley from '../../../assets/Frozen/FrozenBerryMedley.jpg';\nimport blackberries from '../../../assets/Frozen/FrozenBlackberries.jpg';\nimport blueberries from '../../../assets/Frozen/FrozenBlueberries.jpg';\nimport broccoli from '../../../assets/Frozen/FrozenBroccoliFlorets.jpg';\nimport corn from '../../../assets/Frozen/FrozenCorn.jpg';\nimport greenPeas from '../../../assets/Frozen/FrozenGreenPeas.jpg';\nimport mixedVegetables from '../../../assets/Frozen/FrozenMixedVegetables.jpg';\nimport strawberries from '../../../assets/Frozen/FrozenStrawberries.jpg';\n\nclass Frozen extends React.Component {\n  addHandler(name, price) {\n    if (this.props.user === null) {\n      this.props.history.push('auth');\n      window.alert('Please log in to add items to cart');\n    } else {\n      let data = {\n        prevCart: this.props.user.cart,\n        product: {\n          name: name,\n          price: price,\n          count: 1\n        },\n        updateCount: false\n      };\n\n      for (let i = 0; i < data.prevCart.length; i++) {\n        if (data.prevCart[i].name === data.product.name) {\n          data.updateCount = true;\n        }\n      }\n\n      let updatedAcc;\n\n      if (!data.updateCount) {\n        updatedAcc = { ...this.props.user,\n          cart: this.props.user.cart.concat(data.product)\n        };\n      } else {\n        let element;\n\n        for (let i = 0; i < this.props.user.cart.length; i++) {\n          if (this.props.user.cart[i].name === data.product.name) {\n            element = i;\n          }\n        }\n\n        let newAcc = this.props.user.cart;\n        newAcc[element].count += 1;\n        updatedAcc = { ...this.props.user,\n          cart: newAcc\n        };\n      }\n\n      axios.patch(`http://localhost:3005/users/${this.props.user.id}/addProduct`, data).then(response => {\n        console.log(response);\n        this.props.onUpdateCart(updatedAcc);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n  removeHandler(name, price) {\n    let data = {\n      prevCart: this.props.user.cart,\n      product: {\n        name: name,\n        price: price,\n        count: 1\n      },\n      updateCount: false\n    };\n    let cartArray = this.props.user.cart;\n    let index2 = -1;\n\n    for (let i = 0; i < cartArray.length; i++) {\n      if (cartArray[i].name === data.product.name) {\n        index2 = i;\n\n        if (cartArray[i].count > 1) {\n          data.updateCount = true;\n        }\n      }\n    }\n\n    if (!data.updateCount) {\n      if (index2 >= 0) {\n        cartArray.splice(index2, 1);\n      }\n    } else {\n      cartArray[index2].count -= 1;\n    }\n\n    let updatedAcc = { ...this.props.user,\n      cart: cartArray\n    }; //PATCH remove\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/removeProduct`, data).then(response => {\n      console.log(response);\n      this.props.onUpdateCart(updatedAcc);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  imageHandler(item) {\n    let imgLibrary = [{\n      name: \"Frozen Berry Medley\",\n      img: berryMedley\n    }, {\n      name: \"Frozen Blackberries\",\n      img: blackberries\n    }, {\n      name: \"Frozen Blueberries\",\n      img: blueberries\n    }, {\n      name: \"Frozen Broccoli Florets\",\n      img: broccoli\n    }, {\n      name: \"Frozen Corn\",\n      img: corn\n    }, {\n      name: \"Frozen Green Peas\",\n      img: greenPeas\n    }, {\n      name: \"Frozen Mixed Vegetables\",\n      img: mixedVegetables\n    }, {\n      name: \"Frozen Strawberries\",\n      img: strawberries\n    }];\n    let result = imgLibrary.filter(obj => {\n      return obj.name === item;\n    });\n    return result[0].img;\n  }\n\n  countHandler(item) {\n    if (this.props.user !== null) {\n      let userCart = this.props.user.cart;\n      let result = -1;\n\n      for (let i = 0; i < userCart.length; i++) {\n        if (userCart[i].name === item) {\n          result = userCart[i].count;\n        }\n      }\n\n      if (result === -1) {\n        return 0;\n      } else {\n        return result;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  render() {\n    let frozenItems = [];\n\n    for (let i = 0; i < this.props.productsArr.length; i++) {\n      if (this.props.productsArr[i].type === \"Frozen\") {\n        frozenItems.push(this.props.productsArr[i]);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Fruit,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Frozen Fruit and Vegetables\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.FruitContainer,\n        children: frozenItems.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(ProductModel, {\n            name: item.name,\n            type: item.type,\n            price: item.price,\n            add: () => this.addHandler(item.name, item.price),\n            remove: () => this.removeHandler(item.name, item.price),\n            count: this.countHandler(item.name),\n            img: this.imageHandler(item.name)\n          }, item._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.activeUser,\n    productsArr: state.products\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateCart: account => dispatch({\n      type: actionTypes.UPDATE_CART,\n      account\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Frozen);","map":{"version":3,"sources":["/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/Products/Frozen/Frozen.js"],"names":["classes","React","useState","connect","axios","ProductModel","actionTypes","berryMedley","blackberries","blueberries","broccoli","corn","greenPeas","mixedVegetables","strawberries","Frozen","Component","addHandler","name","price","props","user","history","push","window","alert","data","prevCart","cart","product","count","updateCount","i","length","updatedAcc","concat","element","newAcc","patch","id","then","response","console","log","onUpdateCart","catch","err","removeHandler","cartArray","index2","splice","imageHandler","item","imgLibrary","img","result","filter","obj","countHandler","userCart","render","frozenItems","productsArr","type","Fruit","FruitContainer","map","index","_id","mapStateToProps","state","activeUser","products","mapDispatchToProps","dispatch","account","UPDATE_CART"],"mappings":"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","sourcesContent":["import classes from '../Fruit/Fruit.module.css';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport ProductModel from '../../../components/UI/ProductModel/ProductModel';\nimport * as actionTypes from '../../../store/actions/actionTypes';\n//Images\nimport berryMedley from '../../../assets/Frozen/FrozenBerryMedley.jpg';\nimport blackberries from '../../../assets/Frozen/FrozenBlackberries.jpg';\nimport blueberries from '../../../assets/Frozen/FrozenBlueberries.jpg';\nimport broccoli from '../../../assets/Frozen/FrozenBroccoliFlorets.jpg';\nimport corn from '../../../assets/Frozen/FrozenCorn.jpg';\nimport greenPeas from '../../../assets/Frozen/FrozenGreenPeas.jpg';\nimport mixedVegetables from '../../../assets/Frozen/FrozenMixedVegetables.jpg';\nimport strawberries from '../../../assets/Frozen/FrozenStrawberries.jpg';\n\nclass Frozen extends React.Component {\n\n    addHandler(name, price) {\n        if (this.props.user === null) {\n            this.props.history.push('auth');\n            window.alert('Please log in to add items to cart');\n        } else {\n            let data = {\n                prevCart: this.props.user.cart,\n                product: {\n                    name: name,\n                    price: price,\n                    count: 1\n                },\n                updateCount: false\n            }\n            \n            for (let i = 0; i < data.prevCart.length; i++) {\n                if (data.prevCart[i].name === data.product.name) {\n                    data.updateCount = true;\n                }\n            }\n\n            let updatedAcc;\n            if (!data.updateCount) {\n                updatedAcc = {\n                    ...this.props.user,\n                    cart: this.props.user.cart.concat(data.product)\n                }\n            } else {\n                let element;\n                for (let i = 0; i < this.props.user.cart.length; i++) {\n                    if (this.props.user.cart[i].name === data.product.name) {\n                        element = i;\n                    }\n                }\n                let newAcc = this.props.user.cart;\n                newAcc[element].count += 1;\n                updatedAcc = {\n                    ...this.props.user,\n                    cart: newAcc\n                }\n            }\n            \n\n            axios.patch(`http://localhost:3005/users/${this.props.user.id}/addProduct`, data)\n            .then(response => {\n                console.log(response);\n                this.props.onUpdateCart(updatedAcc);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        }\n    }\n\n    removeHandler(name, price) {\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price,\n                count: 1\n            },\n            updateCount: false\n        }\n        let cartArray = this.props.user.cart;\n\n        let index2 = -1;\n        for (let i = 0; i < cartArray.length; i++) {\n            if (cartArray[i].name === data.product.name) {\n                index2 = i;\n                if (cartArray[i].count > 1) {\n                    data.updateCount = true\n                }\n            }\n        }\n        if (!data.updateCount) {\n            if (index2 >= 0) {\n                cartArray.splice(index2, 1);\n            }\n        } else {\n            cartArray[index2].count -= 1\n        }\n        \n\n        let updatedAcc = {\n            ...this.props.user,\n            cart: cartArray\n        }\n       \n        //PATCH remove\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/removeProduct`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n        \n    }\n\n    imageHandler(item) {\n\n        let imgLibrary = [\n            { name: \"Frozen Berry Medley\", img: berryMedley },\n            { name: \"Frozen Blackberries\", img: blackberries },\n            { name: \"Frozen Blueberries\", img: blueberries },\n            { name: \"Frozen Broccoli Florets\", img: broccoli },\n            { name: \"Frozen Corn\", img: corn },\n            { name: \"Frozen Green Peas\", img: greenPeas },\n            { name: \"Frozen Mixed Vegetables\", img: mixedVegetables },\n            { name: \"Frozen Strawberries\", img: strawberries }\n        ]\n\n        let result = imgLibrary.filter(obj => {\n            return obj.name === item\n        })\n\n        return result[0].img;\n    }\n\n    countHandler(item) {\n        if (this.props.user !== null) {\n            let userCart = this.props.user.cart;\n            let result = -1;\n            for (let i = 0; i < userCart.length; i++) {\n                if (userCart[i].name === item) {\n                    result = userCart[i].count;\n                }\n            }\n            if (result === -1) {\n                return 0;\n            } else {\n                return result;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    render() {\n        let frozenItems = [];\n        for (let i = 0; i < this.props.productsArr.length; i++) {\n            if (this.props.productsArr[i].type === \"Frozen\") {\n                frozenItems.push(this.props.productsArr[i]);\n            }\n        }\n\n        return (\n            <div className={classes.Fruit}>\n                <h3>Frozen Fruit and Vegetables</h3>\n                <div className={classes.FruitContainer}>\n                    {frozenItems.map((item, index) => {\n                        return <ProductModel name={item.name}\n                        type={item.type}\n                        price={item.price}\n                        key={item._id}\n                        add={() => this.addHandler(item.name, item.price)}\n                        remove={() => this.removeHandler(item.name, item.price)}\n                        count={this.countHandler(item.name)}\n                        img={this.imageHandler(item.name)}\n                        />;\n                    })}\n                </div>\n            </div>\n        )\n            \n    } \n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.activeUser,\n        productsArr: state.products\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateCart: (account) => dispatch({type: actionTypes.UPDATE_CART, account})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Frozen);"]},"metadata":{},"sourceType":"module"}