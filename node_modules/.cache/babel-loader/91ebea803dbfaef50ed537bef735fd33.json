{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/User/Cart/Cart.js\";\nimport React from 'react';\nimport classes from './Cart.module.css';\nimport { connect } from 'react-redux';\nimport CartItem from '../../../components/UI/CartItem/CartItem';\nimport Modal from '../../../components/UI/Modal/Modal';\nimport axios from 'axios';\nimport * as actionTypes from '../../../store/actions/actionTypes';\n\nclass Cart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modalVisible: false\n    };\n\n    this.removeHandler = (name, price) => {\n      let data = {\n        prevCart: this.props.user.cart,\n        product: {\n          name: name,\n          price: price,\n          count: 1\n        },\n        updateCount: false\n      };\n      let cartArray = this.props.user.cart;\n      let index2 = -1;\n\n      for (let i = 0; i < cartArray.length; i++) {\n        if (cartArray[i].name === data.product.name) {\n          index2 = i;\n\n          if (cartArray[i].count > 1) {\n            data.updateCount = true;\n          }\n        }\n      }\n\n      if (!data.updateCount) {\n        if (index2 >= 0) {\n          cartArray.splice(index2, 1);\n        }\n      } else {\n        cartArray[index2].count -= 1;\n      }\n\n      let updatedAcc = { ...this.props.user,\n        cart: cartArray\n      }; //PATCH remove\n\n      axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data).then(response => {\n        console.log(response);\n        this.props.onUpdateCart(updatedAcc);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  addHandler(name, price) {\n    let data = {\n      prevCart: this.props.user.cart,\n      product: {\n        name: name,\n        price: price,\n        count: 1\n      },\n      updateCount: true\n    }; //Determines if item exists in cart and count needs to be updated\n\n    for (let i = 0; i < data.prevCart.length; i++) {\n      if (data.prevCart[i].name === data.product.name) {\n        data.updateCount = true;\n      }\n    }\n\n    let updatedAcc;\n\n    if (!data.updateCount) {\n      updatedAcc = { ...this.props.user,\n        cart: this.props.user.cart.concat(data.product)\n      };\n    } else {\n      let element;\n\n      for (let i = 0; i < this.props.user.cart.length; i++) {\n        if (this.props.user.cart[i].name === data.product.name) {\n          element = i;\n        }\n      }\n\n      let newAcc = this.props.user.cart;\n      newAcc[element].count += 1;\n      updatedAcc = { ...this.props.user,\n        cart: newAcc\n      };\n    }\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data).then(response => {\n      console.log(response);\n      this.props.onUpdateCart(updatedAcc);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  setModalVisible() {\n    this.setState({\n      modalVisible: !this.state.modalVisible\n    });\n  }\n\n  render() {\n    let totalItems = 0;\n    let price = 0;\n\n    if (this.props.user !== null) {\n      for (let i = 0; i < this.props.user.cart.length; i++) {\n        totalItems += this.props.user.cart[i].count;\n        price += this.props.user.cart[i].price * this.props.user.cart[i].count;\n      }\n    }\n\n    let modal = \"\";\n    let message = `Place order for $${price.toFixed(2)}?`;\n\n    if (this.state.modalVisible) {\n      modal = /*#__PURE__*/_jsxDEV(Modal, {\n        message: message,\n        xClick: () => this.setModalVisible()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [modal, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Cart,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), this.props.user.cart.map(item => {\n          return /*#__PURE__*/_jsxDEV(CartItem, {\n            name: item.name,\n            price: item.price,\n            count: item.count,\n            add: () => this.addHandler(item.name, item.price),\n            remove: () => this.removeHandler(item.name, item.price)\n          }, Math.random(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 32\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Total Items: \", totalItems]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Price: $\", price.toFixed(2), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: classes.button,\n            onClick: () => this.setModalVisible(),\n            children: \"Place Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.activeUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateCart: account => dispatch({\n      type: actionTypes.UPDATE_CART,\n      account\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\n/* export const Cart = connect(mapStateToProps, mapDispatchToProps)(Cart);\nexport const removeHandler = () => this.removeHandler(); */","map":{"version":3,"sources":["/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/User/Cart/Cart.js"],"names":["React","classes","connect","CartItem","Modal","axios","actionTypes","Cart","Component","state","modalVisible","removeHandler","name","price","data","prevCart","props","user","cart","product","count","updateCount","cartArray","index2","i","length","splice","updatedAcc","patch","id","then","response","console","log","onUpdateCart","catch","err","addHandler","concat","element","newAcc","setModalVisible","setState","render","totalItems","modal","message","toFixed","map","item","Math","random","button","mapStateToProps","activeUser","mapDispatchToProps","dispatch","account","type","UPDATE_CART"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classes from './Cart.module.css';\nimport { connect } from 'react-redux';\nimport CartItem from '../../../components/UI/CartItem/CartItem';\nimport Modal from '../../../components/UI/Modal/Modal';\nimport axios from 'axios';\nimport * as actionTypes from '../../../store/actions/actionTypes';\n\nclass Cart extends React.Component {\n\n    state = {\n        modalVisible: false\n    }\n\n    addHandler(name, price) {\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price,\n                count: 1\n            },\n            updateCount: true\n        }\n        \n        //Determines if item exists in cart and count needs to be updated\n        for (let i = 0; i < data.prevCart.length; i++) {\n            if (data.prevCart[i].name === data.product.name) {\n                data.updateCount = true;\n            }\n        }\n\n        let updatedAcc;\n        if (!data.updateCount) {\n            updatedAcc = {\n                ...this.props.user,\n                cart: this.props.user.cart.concat(data.product)\n            }\n        } else {\n            let element;\n            for (let i = 0; i < this.props.user.cart.length; i++) {\n                if (this.props.user.cart[i].name === data.product.name) {\n                    element = i;\n                }\n            }\n            let newAcc = this.props.user.cart;\n            newAcc[element].count += 1;\n            updatedAcc = {\n                ...this.props.user,\n                cart: newAcc\n            }\n        }\n\n\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    removeHandler = (name, price) => {\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price,\n                count: 1\n            },\n            updateCount: false\n        }\n        let cartArray = this.props.user.cart;\n\n        let index2 = -1;\n        for (let i = 0; i < cartArray.length; i++) {\n            if (cartArray[i].name === data.product.name) {\n                index2 = i;\n                if (cartArray[i].count > 1) {\n                    data.updateCount = true\n                }\n            }\n        }\n        if (!data.updateCount) {\n            if (index2 >= 0) {\n                cartArray.splice(index2, 1);\n            }\n        } else {\n            cartArray[index2].count -= 1\n        }\n\n        let updatedAcc = {\n            ...this.props.user,\n            cart: cartArray\n        }\n       \n        //PATCH remove\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n        \n    }\n\n    setModalVisible() {\n        this.setState({modalVisible: !this.state.modalVisible})\n    }\n\n    render() {\n        let totalItems = 0;\n        let price = 0;\n        if (this.props.user !== null) {\n            for (let i = 0; i < this.props.user.cart.length; i++) {\n                totalItems += this.props.user.cart[i].count;\n                price += this.props.user.cart[i].price * this.props.user.cart[i].count\n            }\n        }\n\n        let modal = \"\";\n        let message = `Place order for $${price.toFixed(2)}?`\n        if (this.state.modalVisible) {\n            modal = <Modal message={message} xClick={() => this.setModalVisible()}/>;\n        }\n\n        return (\n            <React.Fragment>\n                {modal}\n                <div className={classes.Cart}>\n                    <h2>Your Cart</h2>\n                    {this.props.user.cart.map(item => {\n                        return <CartItem \n                        key={Math.random()} \n                        name={item.name} \n                        price={item.price}\n                        count={item.count} \n                        add={() => this.addHandler(item.name, item.price)}\n                        remove={() => this.removeHandler(item.name, item.price)}/>\n                    })}\n                    <hr />\n                    <div>\n                        <h4>Total Items: {totalItems}</h4>\n                        <h4>Price: ${price.toFixed(2)} </h4>\n                        <button className={classes.button} onClick={() => this.setModalVisible()}>Place Order</button>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.activeUser\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateCart: (account) => dispatch({type: actionTypes.UPDATE_CART, account})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\n\n/* export const Cart = connect(mapStateToProps, mapDispatchToProps)(Cart);\nexport const removeHandler = () => this.removeHandler(); */"]},"metadata":{},"sourceType":"module"}