{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/Auth/Auth.js\";\nimport React from 'react';\nimport Input from '../../components/UI/Input/Input';\n\nclass Auth extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        userName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      password: {\n        userName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => {\n      /*#__PURE__*/\n      _jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/Auth/Auth.js"],"names":["React","Input","Auth","Component","state","controls","userName","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","rules","isValid","trim","length","maxLength","isEmail","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","classes","submitHandler"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Input from '../../components/UI/Input/Input';\n\nclass Auth extends React.Component {\n    state = {\n        controls: {\n            userName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        password: {\n            userName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        const form = formElementsArray.map(formElement => {\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )}/>\n        })\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <button>SUBMIT</button>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}