{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/Products/Fruit/Fruit.js\";\nimport classes from './Fruit.module.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport ProductModel from '../../../components/UI/ProductModel/ProductModel';\nimport * as actionTypes from '../../../store/actions/actionTypes'; //Images\n\nimport banana from '../../../assets/Fruit/Banana.jpg';\n\nclass Fruit extends React.Component {\n  /* useEffect(() => {\n      axios.get('/products')\n      .then\n  }, []) */\n  addHandler(name, price) {\n    console.log(\"here\");\n    console.log(this.props.user);\n    let data = {\n      prevCart: this.props.user.cart,\n      product: {\n        name: name,\n        price: price\n      },\n      updateCount: false\n    };\n    /* for (let i = 0; i < data.prevCart.length; i++) {\n        if (data.prevCart[i].name === data.product.name) {\n            data.prevCart[i].count += 1;\n            data.updateCount = true;\n        }\n    } */\n\n    let updatedAcc = { ...this.props.user,\n      cart: this.props.user.cart.concat(data.product)\n    };\n    /* axios.patch(`http://localhost:3005/users/${this.props.user.id}`, { cart: `${this.props.user.cart.push(product)}`} ) */\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data).then(response => {\n      console.log(response);\n      this.props.onUpdateCart(updatedAcc);\n    }).catch(err => {\n      console.log(err);\n    });\n    /* this.props.onAddProduct(product); */\n  }\n\n  removeHandler(name, price) {\n    let data = {\n      prevCart: this.props.user.cart,\n      product: {\n        name: name,\n        price: price\n      }\n    };\n    let cartArray = this.props.user.cart;\n    let index2 = -1;\n\n    for (let i = 0; i < cartArray.length; i++) {\n      if (cartArray[i].name === data.product.name) {\n        index2 = i;\n      }\n    }\n\n    if (index2 >= 0) {\n      cartArray.splice(index2, 1);\n    }\n\n    console.log(cartArray);\n    let updatedAcc = { ...this.props.user,\n      cart: cartArray\n    }; //PATCH remove\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data).then(response => {\n      console.log(response);\n      this.props.onUpdateCart(updatedAcc);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    let fruitItems = [];\n\n    for (let i = 0; i < this.props.productsArr.length; i++) {\n      if (this.props.productsArr[i].type === \"Fruit\") {\n        fruitItems.push(this.props.productsArr[i]);\n      }\n    }\n\n    let imgLibrary = {\n      Banana: banana\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Fruit,\n      children: [\"Hi Im the fruit page\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.FruitContainer,\n        children: fruitItems.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(ProductModel, {\n            name: item.name,\n            type: item.type,\n            price: item.price,\n            add: () => this.addHandler(item.name, item.price),\n            remove: () => this.removeHandler(item.name, item.price),\n            img: imgLibrary.Banana\n          }, item._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.activeUser,\n    productsArr: state.products\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateCart: account => dispatch({\n      type: actionTypes.UPDATE_CART,\n      account\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Fruit);","map":{"version":3,"sources":["/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/containers/Products/Fruit/Fruit.js"],"names":["classes","React","useState","useEffect","axios","connect","ProductModel","actionTypes","banana","Fruit","Component","addHandler","name","price","console","log","props","user","data","prevCart","cart","product","updateCount","updatedAcc","concat","patch","id","then","response","onUpdateCart","catch","err","removeHandler","cartArray","index2","i","length","splice","render","fruitItems","productsArr","type","push","imgLibrary","Banana","FruitContainer","map","item","index","_id","mapStateToProps","state","activeUser","products","mapDispatchToProps","dispatch","account","UPDATE_CART"],"mappings":"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","sourcesContent":["import classes from './Fruit.module.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport ProductModel from '../../../components/UI/ProductModel/ProductModel';\nimport * as actionTypes from '../../../store/actions/actionTypes';\n//Images\nimport banana from '../../../assets/Fruit/Banana.jpg';\n\nclass Fruit extends React.Component {\n\n    /* useEffect(() => {\n        axios.get('/products')\n        .then\n    }, []) */\n    addHandler(name, price) {\n        console.log(\"here\");\n        console.log(this.props.user);\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price\n            },\n            updateCount: false\n        }\n        \n        /* for (let i = 0; i < data.prevCart.length; i++) {\n            if (data.prevCart[i].name === data.product.name) {\n                data.prevCart[i].count += 1;\n                data.updateCount = true;\n            }\n        } */\n\n\n        let updatedAcc = {\n            ...this.props.user,\n            cart: this.props.user.cart.concat(data.product)\n        }\n\n        /* axios.patch(`http://localhost:3005/users/${this.props.user.id}`, { cart: `${this.props.user.cart.push(product)}`} ) */\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n\n\n        /* this.props.onAddProduct(product); */\n    }\n\n    removeHandler(name, price) {\n        let data = {\n            prevCart: this.props.user.cart,\n            product: {\n                name: name,\n                price: price\n            }\n        }\n        let cartArray = this.props.user.cart;\n\n        let index2 = -1;\n        for (let i = 0; i < cartArray.length; i++) {\n            if (cartArray[i].name === data.product.name) {\n                index2 = i;\n            }\n        }\n        if (index2 >= 0) {\n            cartArray.splice(index2, 1);\n        }\n        console.log(cartArray);\n\n        let updatedAcc = {\n            ...this.props.user,\n            cart: cartArray\n        }\n       \n        //PATCH remove\n        axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data)\n        .then(response => {\n            console.log(response);\n            this.props.onUpdateCart(updatedAcc);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n        \n    }\n    \n\n\n    render() {\n        let fruitItems = [];\n        for (let i = 0; i < this.props.productsArr.length; i++) {\n            if (this.props.productsArr[i].type === \"Fruit\") {\n                fruitItems.push(this.props.productsArr[i]);\n            }\n        }\n\n        let imgLibrary = {\n            Banana: banana\n        }\n\n\n        return (\n            <div className={classes.Fruit}>\n                Hi Im the fruit page\n                <div className={classes.FruitContainer}>\n                    {fruitItems.map((item, index) => {\n                        return <ProductModel name={item.name}\n                        type={item.type}\n                        price={item.price}\n                        key={item._id}\n                        add={() => this.addHandler(item.name, item.price)}\n                        remove={() => this.removeHandler(item.name, item.price)}\n                        img={imgLibrary.Banana}\n                        />;\n                    })}\n                </div>\n            </div>\n        )\n    }\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.activeUser,\n        productsArr: state.products\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateCart: (account) => dispatch({type: actionTypes.UPDATE_CART, account})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Fruit);"]},"metadata":{},"sourceType":"module"}