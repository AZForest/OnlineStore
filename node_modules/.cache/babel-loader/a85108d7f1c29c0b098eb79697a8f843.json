{"ast":null,"code":"import axios from 'axios';\n\nconst addHandler = (name, price) => {\n  let data = {\n    prevCart: this.props.user.cart,\n    product: {\n      name: name,\n      price: price,\n      count: 1\n    },\n    updateCount: true\n  }; //Determines if item exists in cart and count needs to be updated\n\n  for (let i = 0; i < data.prevCart.length; i++) {\n    if (data.prevCart[i].name === data.product.name) {\n      data.updateCount = true;\n    }\n  }\n\n  let updatedAcc;\n\n  if (!data.updateCount) {\n    updatedAcc = { ...this.props.user,\n      cart: this.props.user.cart.concat(data.product)\n    };\n  } else {\n    let element;\n\n    for (let i = 0; i < this.props.user.cart.length; i++) {\n      if (this.props.user.cart[i].name === data.product.name) {\n        element = i;\n      }\n    }\n\n    let newAcc = this.props.user.cart;\n    newAcc[element].count += 1;\n    updatedAcc = { ...this.props.user,\n      cart: newAcc\n    };\n  }\n\n  axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data).then(response => {\n    console.log(response);\n    this.props.onUpdateCart(updatedAcc);\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst removeHandler = (name, price) => {\n  let data = {\n    prevCart: this.props.user.cart,\n    product: {\n      name: name,\n      price: price,\n      count: 1\n    },\n    updateCount: false\n  };\n  let cartArray = this.props.user.cart;\n  let index2 = -1;\n\n  for (let i = 0; i < cartArray.length; i++) {\n    if (cartArray[i].name === data.product.name) {\n      index2 = i;\n\n      if (cartArray[i].count > 1) {\n        data.updateCount = true;\n      }\n    }\n  }\n\n  if (!data.updateCount) {\n    if (index2 >= 0) {\n      cartArray.splice(index2, 1);\n    }\n  } else {\n    cartArray[index2].count -= 1;\n  }\n\n  let updatedAcc = { ...this.props.user,\n    cart: cartArray\n  }; //PATCH remove\n\n  axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data).then(response => {\n    console.log(response);\n    this.props.onUpdateCart(updatedAcc);\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nexport default {\n  addHandler,\n  removeHandler\n};","map":{"version":3,"sources":["/Users/alexforest/Desktop/OnlineStoreArch/online-store/src/functions/functions.js"],"names":["axios","addHandler","name","price","data","prevCart","props","user","cart","product","count","updateCount","i","length","updatedAcc","concat","element","newAcc","patch","id","then","response","console","log","onUpdateCart","catch","err","removeHandler","cartArray","index2","splice"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst addHandler = (name, price) => {\n    let data = {\n        prevCart: this.props.user.cart,\n        product: {\n            name: name,\n            price: price,\n            count: 1\n        },\n        updateCount: true\n    }\n    \n    //Determines if item exists in cart and count needs to be updated\n    for (let i = 0; i < data.prevCart.length; i++) {\n        if (data.prevCart[i].name === data.product.name) {\n            data.updateCount = true;\n        }\n    }\n\n    let updatedAcc;\n    if (!data.updateCount) {\n        updatedAcc = {\n            ...this.props.user,\n            cart: this.props.user.cart.concat(data.product)\n        }\n    } else {\n        let element;\n        for (let i = 0; i < this.props.user.cart.length; i++) {\n            if (this.props.user.cart[i].name === data.product.name) {\n                element = i;\n            }\n        }\n        let newAcc = this.props.user.cart;\n        newAcc[element].count += 1;\n        updatedAcc = {\n            ...this.props.user,\n            cart: newAcc\n        }\n    }\n\n\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/add`, data)\n    .then(response => {\n        console.log(response);\n        this.props.onUpdateCart(updatedAcc);\n    })\n    .catch(err => {\n        console.log(err);\n    })\n}\n\nconst removeHandler = (name, price) => {\n    let data = {\n        prevCart: this.props.user.cart,\n        product: {\n            name: name,\n            price: price,\n            count: 1\n        },\n        updateCount: false\n    }\n    let cartArray = this.props.user.cart;\n\n    let index2 = -1;\n    for (let i = 0; i < cartArray.length; i++) {\n        if (cartArray[i].name === data.product.name) {\n            index2 = i;\n            if (cartArray[i].count > 1) {\n                data.updateCount = true\n            }\n        }\n    }\n    if (!data.updateCount) {\n        if (index2 >= 0) {\n            cartArray.splice(index2, 1);\n        }\n    } else {\n        cartArray[index2].count -= 1\n    }\n\n    let updatedAcc = {\n        ...this.props.user,\n        cart: cartArray\n    }\n   \n    //PATCH remove\n    axios.patch(`http://localhost:3005/users/${this.props.user.id}/remove`, data)\n    .then(response => {\n        console.log(response);\n        this.props.onUpdateCart(updatedAcc);\n    })\n    .catch(err => {\n        console.log(err);\n    })\n    \n}\n\nexport default { addHandler, removeHandler };"]},"metadata":{},"sourceType":"module"}